@model hamko.Models.Sales

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>New Sales Entry</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />

    <style>
        .qty-error {
            color: red;
            font-size: 0.9em;
            display: none;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body>
    @if (TempData["error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="container py-4">
        <form method="post" asp-controller="Sales" asp-action="Create" onsubmit="disableSubmit(this)">
            @Html.AntiForgeryToken()

            <h3 class="mb-4">New Sales Entry</h3>

            <!-- Invoice, Reference, Date -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Invoice No</label>
                    <input type="text" class="form-control" name="InvoiceNo" value="@Model.InvoiceNo" readonly />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Reference No</label>
                    <input type="text" class="form-control" name="RefNo" value="@Model.RefNo" readonly />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Date</label>
                    <input type="text"
                           class="form-control"
                           id="Date"
                           name="Date"
                           required
                           value="@Model.Date.ToString("yyyy-MM-dd")" />
                </div>
            </div>

            <!-- Customer, User, Status -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Customer</label>
                    <select class="form-select" id="CustomerId" name="CustomerId" required>
                        <option value="">-- Select Customer --</option>
                        <option value="1">Customer A</option>
                        <option value="2">Customer B</option>
                        <option value="3">Customer C</option>
                    </select>
                </div>

                <div class="col-md-4">
                    <label class="form-label">User</label>
                    <select class="form-select" id="UserId" name="UserId" required>
                        <option value="">-- Select User --</option>
                        <option value="1">User1</option>
                        <option value="2">User2</option>
                        <option value="3">User3</option>
                    </select>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Status</label>
                    <select class="form-select" name="Status">
                        <option value="Active" selected>Active</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                </div>
            </div>

            <!-- Dynamic Details Table -->
            <div class="table-responsive mb-3">
                <table class="table table-bordered text-center" id="DetailsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Product</th>
                            <th>Branch</th>
                            <th>Stock</th>
                            <th>Qty</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody >
                        <tr>
                            <td>
                                <button type="button" class="btn btn-sm btn-danger remove-row" disabled>&times;</button>
                            </td>
                            <td>
                                <input type="text" class="form-control product-input" autocomplete="off" />
                                <input type="hidden" name="StockOuts[0].ProductId" class="product-id" />
                            </td>
                            <td>
                                <input type="text" class="form-control branch-input" autocomplete="off" />
                                <input type="hidden" name="StockOuts[0].BranchId" class="branch-id" />
                            </td>
                            <td>
                                <span class="stock-available">0</span>
                            </td>
                            <td>
                                <input type="number"
                                       name="StockOuts[0].Quantity"
                                       class="form-control qty"
                                       step="0.01"
                                       value="0" />
                                <div class="qty-error"></div>
                            </td>
                            <td>
                                <input type="number"
                                       name="StockOuts[0].Price"
                                       class="form-control price"
                                       step="0.01"
                                       value="0" />
                            </td>
                            <td>
                                <input type="number"
                                       name="StockOuts[0].TotalPrice"
                                       class="form-control total"
                                       value="0.00"
                                       readonly />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Add Row Controls -->
            <div class="mb-3 d-flex align-items-center">
                <input type="number"
                       id="row-count"
                       class="form-control me-2"
                       value="1"
                       min="1"
                       max="10"
                       style="width: 100px;" />
                <button type="button" class="btn btn-secondary" id="add-row">
                    Add Row(s)
                </button>
            </div>

            <div class="text-end mb-3">
                <strong>Grand Total: </strong>
                <span id="grand-total">0.00</span>
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script>
        // ViewBag.StockData থেকে আসা stock quantity data (structure: [{ProductId:1, BranchId:2, AvailableQty: 100}, ...])
        const stockData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.StockData ?? new List<dynamic>()));

        $(document).ready(function () {
            function initAutocomplete(row) {
                row.find(".product-input").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '@Url.Action("SearchProducts", "Sales")',
                            data: { term: request.term },
                            success: function (data) {
                                response(data);
                            }
                        });
                    },
                    minLength: 2,
                    select: function (event, ui) {
                        $(this).val(ui.item.label);
                        row.find(".product-id").val(ui.item.value);

                        // After selecting product, update stock display if branch selected
                        const branchId = row.find(".branch-id").val();
                        updateStockDisplay(row, ui.item.value, branchId);

                        return false;
                    }
                });

                row.find(".branch-input").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '@Url.Action("SearchBranches", "Sales")',
                            data: { term: request.term },
                            success: function (data) {
                                response(data);
                            }
                        });
                    },
                    minLength: 2,
                    select: function (event, ui) {
                        $(this).val(ui.item.label);
                        row.find(".branch-id").val(ui.item.value);

                        // After selecting branch, update stock display if product selected
                        const productId = row.find(".product-id").val();
                        updateStockDisplay(row, productId, ui.item.value);

                        return false;
                    }
                });
            }

            function updateStockDisplay(row, productId, branchId) {
                const stockSpan = row.find('.stock-available');
                if (productId && branchId) {
                    const stockEntry = stockData.find(s => s.ProductId == productId && s.BranchId == branchId);
                    const availableQty = stockEntry ? stockEntry.AvailableQty : 0;
                    stockSpan.text(availableQty);
                } else {
                    stockSpan.text('0');
                }
            }

            flatpickr("#Date", {
                dateFormat: "Y-m-d",
                defaultDate: new Date()
            });

            const table = document.getElementById('DetailsTable');
            const addRowBtn = document.getElementById('add-row');

                  addRowBtn.addEventListener('click', () => {
            const count = parseInt(document.getElementById('row-count').value) || 1;
            const tbody = table.querySelector("tbody"); // ✅ only tbody rows count
            const existingRows = tbody.querySelectorAll("tr").length;

            for (let i = 0; i < count; i++) {
                const newRow = table.rows[1].cloneNode(true); // clone first data row (not header)
                const newIndex = existingRows + i;

                // Reset input values
                $(newRow).find("input[type='text']").val("");
                $(newRow).find("input[type='hidden']").val("");
                $(newRow).find("input[type='number']").val("0");
                $(newRow).find(".stock-available").text("0");

                newRow.querySelector('.remove-row').disabled = false;

                // Update input names
                newRow.querySelectorAll('input, select').forEach(el => {
                    if (el.name) {
                        el.name = el.name.replace(/\[\d+\]/, `[${newIndex}]`);
                    }
                });

                tbody.appendChild(newRow); // ✅ add to tbody only
                initAutocomplete($(newRow));
            }
        });


            // Remove row
            table.addEventListener('click', e => {
                if (e.target.classList.contains('remove-row')) {
                    const row = e.target.closest('tr');
                    if (table.rows.length > 1) {
                        row.remove();
                        updateGrandTotal();
                    }
                }
            });

            // On qty or price input, calculate total and grand total
            table.addEventListener('input', e => {
                const el = e.target;

                if (el.classList.contains('qty') || el.classList.contains('price')) {
                    const row = el.closest('tr');
                    const qty = parseFloat(row.querySelector('.qty').value) || 0;
                    const price = parseFloat(row.querySelector('.price').value) || 0;
                    row.querySelector('.total').value = (qty * price).toFixed(2);
                    updateGrandTotal();
                }
            });

            function updateGrandTotal() {
                let sum = 0;
                document.querySelectorAll('.total').forEach(el => {
                    sum += parseFloat(el.value) || 0;
                });
                document.getElementById('grand-total').innerText = sum.toFixed(2);
            }

            // Initialize autocomplete on existing rows at page load
            $("#DetailsTable tbody tr").each(function () {
                initAutocomplete($(this));
            });

            // Optional: Disable submit button to prevent multiple submits
            window.disableSubmit = function (form) {
                const btn = form.querySelector("button[type='submit']");
                btn.disabled = true;
                btn.innerText = "Submitting...";
            };
        });
    </script>

</body>
</html>
